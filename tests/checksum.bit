data List a               = Nil | Cons a (List a)

foldl                    :: (a -> b -> b) -> b -> List a -> b
foldl add tot Nil         = tot
foldl add tot (Cons x xs) = foldl add (add x tot) xs

list                      = Cons 1 (Cons 2 (Cons 3 Nil))

checksum                 :: List (Bit 16) -> Bit 16
checksum xs               = complement (addParts (foldl add 0 xs)) 
  where
  add x total             = (0 # x) + total
  addParts (x # y)        = x + y



